@using InventarioComputo.Security
@inject PermisosService Perms
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - La Armería</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/Styles/Style_General.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <aside class="sidebar">
        <div class="sidebar-header">
            <a href="/Principal" class="logo-link">
                <img src="~/images/Logo_LaArmeria.png" alt="Logo La Armería" class="header-logo">
            </a>
        </div>

        <nav class="sidebar-nav">
            <ul class="nav-list">
                <li class="nav-item">
                    <a class="nav-link @IsActive("Principal")" asp-page="/Principal">
                        <i class="fas fa-home"></i> <span>Dashboard</span>
                    </a>
                </li>

                <li class="nav-item">
                    <a class="nav-link @IsActive("Inventario")" asp-page="/Inventario/Index">
                        <i class="fas fa-laptop"></i> <span>Inventario</span>
                    </a>
                </li>

                @* Asignaciones: requiere ModificarEquipos *@
                @if (await Perms.TieneAsync(User, PermisosConstantes.ModificarEquipos))
                {
                    <li class="nav-item">
                        <a class="nav-link @IsActive("Asignaciones")" asp-page="/Asignaciones/Index">
                            <i class="fas fa-user-check"></i> <span>Asignaciones</span>
                        </a>
                    </li>
                }

                <li class="nav-item">
                    <a class="nav-link @IsActive("Mantenimientos")" asp-page="/Mantenimientos/Index">
                        <i class="fas fa-tools"></i> <span>Mantenimientos</span>
                    </a>
                </li>

                @* Reportes: visible solo con VerReportes *@
                @if (await Perms.TieneAsync(User, PermisosConstantes.VerReportes))
                {
                    <li class="nav-item">
                        <a class="nav-link @IsActive("Reportes")" asp-page="/Reportes/Index">
                            <i class="fas fa-chart-pie"></i> <span>Reportes</span>
                        </a>
                    </li>
                }

                @* Usuarios: visible solo con VerUsuarios *@
                @if (await Perms.TieneAsync(User, PermisosConstantes.VerUsuarios))
                {
                    <li class="nav-item">
                        <a class="nav-link @IsActive("Usuarios")" asp-page="/Usuarios/Index">
                            <i class="fas fa-user-shield"></i> <span>Usuarios</span>
                        </a>
                    </li>
                }

                @* (Opcional) Bitácora: visible con VerBitacora (si tienes este permiso y página) *@
                @if (await Perms.TieneAsync(User, PermisosConstantes.VerBitacora))
                {
                    <li class="nav-item">
                        <a class="nav-link @IsActive("Bitacora")" asp-page="/Bitacora/Index">
                            <i class="fas fa-book"></i> <span>Bitácora</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>

        <div class="sidebar-footer dropdown">
            <a href="#" class="d-flex align-items-center text-decoration-none dropdown-toggle" id="dropdownUser" data-bs-toggle="dropdown" aria-expanded="false">
                <span class="username">@User.Identity?.Name</span>
            </a>
            <ul class="dropdown-menu dropdown-menu-dark text-small shadow" aria-labelledby="dropdownUser">
                @* Conexión BDD: visible solo con VerConexionBDD *@
                @if (await Perms.TieneAsync(User, PermisosConstantes.VerConexionBDD))
                {
                    <li>
                        <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#dbConnModal">
                            <i class="fas fa-database me-2"></i> Conexión a BDD
                        </a>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                }

                <li>
                    <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
                        <i class="fas fa-key me-2"></i> Cambiar contraseña
                    </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <a class="dropdown-item" href="/Index">
                        <i class="fas fa-sign-out-alt me-2"></i> Cerrar sesión
                    </a>
                </li>
            </ul>
        </div>
    </aside>

    <button class="hamburger-btn" id="hamburgerBtn">
        <i class="fas fa-bars"></i>
    </button>

    <div class="main-content">
        <main class="general-main">
            @RenderBody()
        </main>

        <footer class="general-footer">
            <div class="container">
                <p>&copy; @DateTime.Now.Year - Sistema de Inventario La Armería</p>
                <p class="version">Versión 1.0.1</p>
            </div>
        </footer>
    </div>

    <div class="modal fade" id="dbConnModal" tabindex="-1" aria-labelledby="dbConnModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="dbConnModalLabel"><i class="fas fa-database me-2"></i> Conexión a Base de Datos</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>

                <div class="modal-body">
                    <form id="dbConnForm" asp-antiforgery="true">
                        <div id="dbConnAlert" class="alert d-none" role="alert"></div>

                        <div class="mb-3">
                            <label for="dbServidor" class="form-label">Servidor</label>
                            <input type="text" class="form-control" id="dbServidor" name="Servidor" placeholder="e.g. SQLSERVER\\INSTANCIA o 192.168.1.10" required>
                        </div>

                        <div class="mb-3">
                            <label for="dbNombre" class="form-label">Base de Datos</label>
                            <input type="text" class="form-control" id="dbNombre" name="BaseDatos" placeholder="e.g. InventarioComputo" required>
                        </div>

                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="dbIntegrated" name="IntegratedSecurity" checked>
                            <label class="form-check-label" for="dbIntegrated">
                                Usar Seguridad Integrada (Windows)
                            </label>
                        </div>

                        <div id="dbCreds" class="row g-2">
                            <div class="col-6">
                                <label for="dbUser" class="form-label">Usuario (SQL)</label>
                                <input type="text" class="form-control" id="dbUser" name="Usuario" placeholder="(opcional)">
                            </div>
                            <div class="col-6">
                                <label for="dbPass" class="form-label">Contraseña</label>
                                <input type="password" class="form-control" id="dbPass" name="Contrasena" placeholder="(opcional)">
                            </div>
                        </div>

                        <div class="form-check mt-2">
                            <input class="form-check-input" type="checkbox" id="dbTrust" name="TrustServerCertificate">
                            <label class="form-check-label" for="dbTrust">
                                Confiar en certificado del servidor (solo si tu entorno lo requiere)
                            </label>
                        </div>

                        <div class="modal-footer mt-3">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                            <button type="submit" class="btn btn-primary">Guardar Conexión</button>
                        </div>
                    </form>
                </div>

            </div>
        </div>
    </div>


    <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="changePasswordModalLabel"><i class="fas fa-key"></i> Cambiar Contraseña</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm" asp-antiforgery="true">
                        <div id="passwordChangeAlert" class="alert d-none" role="alert"></div>
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Contraseña Actual</label>
                            <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">Nueva Contraseña</label>
                            <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirmNewPassword" class="form-label">Confirmar Nueva Contraseña</label>
                            <input type="password" class="form-control" id="confirmNewPassword" name="confirmNewPassword" required>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @functions {
        string IsActive(string pageName)
        {
            var currentPage = ViewContext.RouteData.Values["Page"]?.ToString();
            if (currentPage == "/Principal" && pageName == "Principal") return "active";
            return currentPage?.Contains(pageName, StringComparison.OrdinalIgnoreCase) == true && pageName != "Principal" ? "active" : "";
        }
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // Lógica para el menú hamburguesa
        document.getElementById('hamburgerBtn').addEventListener('click', function () {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('show');
            this.innerHTML = sidebar.classList.contains('show') ?
                '<i class="fas fa-times"></i>' : '<i class="fas fa-bars"></i>';
        });

        // ==========================================================
        // ========= SCRIPT FINAL PARA EL MODAL DE CONTRASEÑA =========
        // ==========================================================
        document.getElementById('changePasswordForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const form = e.target;
            const alertBox = document.getElementById('passwordChangeAlert');
            const formData = new FormData(form);
            const url = '/FormContra?handler=ChangePassword';

            fetch(url, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: new URLSearchParams(formData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status} (${response.statusText})`);
                    }
                    return response.json();
                })
                .then(data => {
                    alertBox.textContent = data.message;
                    alertBox.className = 'alert';
                    alertBox.classList.remove('d-none');

                    if (data.success) {
                        alertBox.classList.add('alert-success');
                        // ESPERA 1.5 SEGUNDOS Y LUEGO REDIRIGE AL LOGIN
                        setTimeout(() => {
                            window.location.href = '/Index';
                        }, 1500);
                    } else {
                        alertBox.classList.add('alert-danger');
                        // LOS CAMPOS SE LIMPIAN AL HABER UN ERROR
                        form.reset();
                    }
                })
                .catch(error => {
                    alertBox.textContent = `Error: ${error.message}. Por favor, verifica la URL y el archivo.`;
                    alertBox.className = 'alert alert-danger';
                    alertBox.classList.remove('d-none');
                    // LOS CAMPOS TAMBIÉN SE LIMPIAN AQUÍ
                    form.reset();
                });
        });

        // Limpiar el modal cuando se cierra
        const passwordModal = document.getElementById('changePasswordModal');
        passwordModal.addEventListener('hidden.bs.modal', function () {
            document.getElementById('changePasswordForm').reset();
            document.getElementById('passwordChangeAlert').classList.add('d-none');
        });

        // Toggle de credenciales según seguridad integrada
        const dbIntegratedChk = document.getElementById('dbIntegrated');
        const dbCredsBlock = document.getElementById('dbCreds');
        function toggleCreds() {
            const useIntegrated = dbIntegratedChk.checked;
            dbCredsBlock.style.display = useIntegrated ? 'none' : '';
            document.getElementById('dbUser').disabled = useIntegrated;
            document.getElementById('dbPass').disabled = useIntegrated;
        }
        dbIntegratedChk.addEventListener('change', toggleCreds);
        toggleCreds();

        // Envío del formulario
        document.getElementById('dbConnForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const form = e.target;
            const alertBox = document.getElementById('dbConnAlert');
            const formData = new FormData(form);

            formData.set("IntegratedSecurity", document.getElementById("dbIntegrated").checked);
            formData.set("TrustServerCertificate", document.getElementById("dbTrust").checked);

            const url = '/FormConexion?handler=Actualizar';

            fetch(url, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: new URLSearchParams(formData)
            })
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP ${response.status} (${response.statusText})`);
                    return response.json();
                })
                .then(data => {
                    alertBox.textContent = data.message || 'Conexión actualizada.';
                    alertBox.className = 'alert';
                    alertBox.classList.remove('d-none');

                    if (data.success) {
                        alertBox.classList.add('alert-success');
                        // Recarga para que toda la app tome la nueva cadena
                        setTimeout(() => window.location.reload(), 1200);
                    } else {
                        alertBox.classList.add('alert-danger');
                    }
                })
                .catch(error => {
                    alertBox.textContent = `Error: ${error.message}.`;
                    alertBox.className = 'alert alert-danger';
                    alertBox.classList.remove('d-none');
                });
        });

        // Limpiar modal al cerrar
        const dbConnModal = document.getElementById('dbConnModal');
        dbConnModal.addEventListener('hidden.bs.modal', function () {
            document.getElementById('dbConnForm').reset();
            document.getElementById('dbConnAlert').classList.add('d-none');
            toggleCreds();
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>