@page "/EquiposRegistrados/EquiposForm/{handler?}/{id:int?}"
@model InventarioComputo.Pages.EquiposRegistrados.EquiposFormModel
@{
    ViewData["Title"] = Model.Modo == "Crear" ? "Nuevo Perfil" :
                        Model.Modo == "Editar" ? "Editar Perfil" : "Ver Perfil";
    Layout = "_LayoutGeneral";

    bool esModoLectura = Model.Modo == "Ver";
}

<div class="container-form">
    <h1 class="beige-text"><i class="fas fa-laptop"></i> @ViewData["Title"]</h1>

    <form method="post" class="form-beige">
        <input type="hidden" asp-for="Id" />

        <!-- Datos básicos -->
        <div class="form-group">
            <label asp-for="NombrePerfil" class="form-label">Nombre del Perfil</label>
            <input asp-for="NombrePerfil" class="form-control" readonly="@esModoLectura" />
            <span asp-validation-for="NombrePerfil" class="text-danger"></span>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="IdMarca" class="form-label">Marca</label>
                    <select asp-for="IdMarca" class="form-control input-beige"
                            id="selectMarca" disabled="@esModoLectura" asp-items="Model.Marcas">
                        <option value="">-- Seleccione marca --</option>
                    </select>
                    <span asp-validation-for="IdMarca" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="IdTipoEquipo" class="form-label">Tipo de Equipo</label>
                    <select asp-for="IdTipoEquipo" class="form-control input-beige"
                            id="selectTipo" disabled="@esModoLectura" asp-items="Model.TiposEquipos">
                        <option value="">-- Seleccione tipo --</option>
                    </select>
                    <span asp-validation-for="IdTipoEquipo" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="IdModelo" class="form-label">Modelo</label>
                    <div class="input-group">
                        <select asp-for="IdModelo" class="form-control input-beige"
                                disabled="@esModoLectura" id="selectModelo">
                            <option value="">-- Seleccione modelo --</option>
                        </select>
                        @if (!esModoLectura)
                        {
                            <div class="input-group-append">
                                <button class="btn btn-outline-beige" type="button"
                                        data-toggle="modal" data-target="#modalAgregarModelo">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <span asp-validation-for="IdModelo" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Características técnicas (dinámicas) -->
        <div class="form-group">
            <label class="form-label">Características Técnicas</label>
            <div id="caracteristicas-container">
                @for (int i = 0; i < Model.CaracteristicasSeleccionadas.Count; i++)
                {
                    <div class="caracteristica-item row mb-2">
                        <div class="col-md-5">
                            <select asp-for="CaracteristicasSeleccionadas[i].IdCaracteristica"
                                    class="form-control caracteristica-select"
                                    data-index="@i"
                                    disabled="@esModoLectura">
                                <option value="">-- Seleccione --</option>
                                @foreach (var car in Model.TodasCaracteristicas)
                                {
                                    <option value="@car.Id"
                                            selected="@(car.Id == Model.CaracteristicasSeleccionadas[i]?.IdCaracteristica)"
                                            data-caracteristica-id="@car.Id">
                                        @car.Nombre
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="CaracteristicasSeleccionadas[i].IdCaracteristica" class="text-danger"></span>
                        </div>
                        <div class="col-md-5">
                            <input asp-for="CaracteristicasSeleccionadas[i].Valor"
                                   class="form-control"
                                   placeholder="Valor"
                                   readonly="@esModoLectura" />
                            <span asp-validation-for="CaracteristicasSeleccionadas[i].Valor" class="text-danger"></span>
                        </div>
                        @if (!esModoLectura)
                        {
                            <div class="col-md-2">
                                <button type="button" class="btn btn-danger btn-eliminar-caracteristica">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                }
            </div>
            @if (!esModoLectura)
            {
                <button type="button" id="btn-agregar-caracteristica" class="btn btn-beige-sm mt-2">
                    <i class="fas fa-plus"></i> Agregar Característica
                </button>
            }
        </div>

        <div class="form-actions">
            @if (!esModoLectura)
            {
                <button type="submit" class="btn btn-beige">Guardar</button>
                <a asp-page="Index" class="btn btn-cancelar">Cancelar</a>
            }
            else
            {
                <a asp-page="EquiposForm" asp-route-handler="Editar" asp-route-id="@Model.Id" class="btn btn-beige">Editar</a>
                <a asp-page="Index" class="btn btn-cancelar">Volver</a>
            }
        </div>
    </form>
</div>

<!-- Modal para agregar nuevo modelo -->
<div class="modal fade" id="modalAgregarModelo" tabindex="-1" role="dialog" aria-labelledby="modalAgregarModeloLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalAgregarModeloLabel">Agregar Nuevo Modelo</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="nombreModelo">Nombre del Modelo</label>
                    <input type="text" class="form-control" id="nombreModelo" placeholder="Ej: Latitude 5420">
                </div>
                <div class="form-group">
                    <label for="marcaModelo">Marca</label>
                    <select class="form-control" id="marcaModelo">
                        <option value="">-- Seleccione marca --</option>
                        @foreach (var marca in Model.Marcas)
                        {
                            <option value="@marca.Value">@marca.Text</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="tipoModelo">Tipo de Equipo</label>
                    <select class="form-control" id="tipoModelo">
                        <option value="">-- Seleccione tipo --</option>
                        @foreach (var tipo in Model.TiposEquipos)
                        {
                            <option value="@tipo.Value">@tipo.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-beige" id="btnGuardarModelo">Guardar</button>
            </div>
        </div>
    </div>
</div>

<template id="caracteristica-template">
    <div class="caracteristica-item row mb-2">
        <div class="col-md-5">
            <select class="form-control caracteristica-select"
                    name="CaracteristicasSeleccionadas[0].IdCaracteristica">
                <option value="">-- Seleccione --</option>
                @foreach (var car in Model.TodasCaracteristicas)
                {
                    <option value="@car.Id" data-caracteristica-id="@car.Id">@car.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-5">
            <input class="form-control"
                   name="CaracteristicasSeleccionadas[0].Valor"
                   placeholder="Valor" />
        </div>
        <div class="col-md-2">
            <button type="button" class="btn btn-danger btn-eliminar-caracteristica">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </div>
</template>

@section Styles {
    <style>
        .caracteristica-select option[hidden] {
            display: none;
        }

        .caracteristica-item {
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s;
        }

            .caracteristica-item:hover {
                background-color: #f8f9fa;
            }

        .input-group-append .btn {
            height: 38px;
            border-color: #d2b48c;
            color: #5a4a3a;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Objeto para rastrear características seleccionadas
            const caracteristicasSeleccionadas = new Set();

            // Función para cargar modelos basados en marca y tipo
            async function cargarModelos() {
                const marcaId = document.getElementById('selectMarca').value;
                const tipoId = document.getElementById('selectTipo').value;
                const selectModelo = document.getElementById('selectModelo');

                if (!marcaId || !tipoId) {
                    selectModelo.innerHTML = '<option value="">-- Seleccione marca y tipo --</option>';
                    return;
                }

                try {
                    selectModelo.innerHTML = '<option value="">Cargando modelos...</option>';

                    const response = await fetch(`/EquiposRegistrados/EquiposForm?handler=ModelosPorMarcaYTipo&marcaId=${marcaId}&tipoId=${tipoId}`);
                    if (!response.ok) throw new Error('Error en la respuesta');

                    const modelos = await response.json();

                    let options = '<option value="">-- Seleccione modelo --</option>';
                    modelos.forEach(modelo => {
                        options += `<option value="${modelo.value}"
                                          ${modelo.value == '@Model.IdModelo' ? 'selected' : ''}>
                                        ${modelo.text}
                                    </option>`;
                    });

                    selectModelo.innerHTML = options;
                } catch (error) {
                    console.error('Error cargando modelos:', error);
                    selectModelo.innerHTML = '<option value="">-- Error cargando modelos --</option>';
                }
            }

            // Eventos para cargar modelos cuando cambian marca o tipo
            document.getElementById('selectMarca').addEventListener('change', cargarModelos);
            document.getElementById('selectTipo').addEventListener('change', cargarModelos);

            // Cargar modelos iniciales si hay valores
            if ('@Model.IdMarca' && '@Model.IdTipoEquipo') {
                cargarModelos();
            }

            // Manejar agregar nuevo modelo
            document.getElementById('btnGuardarModelo').addEventListener('click', async function () {
                const nombre = document.getElementById('nombreModelo').value;
                const marcaId = document.getElementById('marcaModelo').value;
                const tipoId = document.getElementById('tipoModelo').value;

                if (!nombre || !marcaId || !tipoId) {
                    alert('Por favor complete todos los campos');
                    return;
                }

                try {
                    const response = await fetch('/EquiposRegistrados/EquiposForm?handler=AgregarModelo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify({
                            NombreModelo: nombre,
                            MarcaId: parseInt(marcaId),
                            TipoId: parseInt(tipoId)
                        })
                    });

                    const resultado = await response.json();
                    if (resultado.success) {
                        // Agregar el nuevo modelo al dropdown
                        const selectModelo = document.getElementById('selectModelo');
                        const option = document.createElement('option');
                        option.value = resultado.id;
                        option.textContent = nombre;
                        selectModelo.appendChild(option);
                        selectModelo.value = resultado.id;

                        // Cerrar el modal
                        $('#modalAgregarModelo').modal('hide');

                        // Limpiar el formulario
                        document.getElementById('nombreModelo').value = '';
                        document.getElementById('marcaModelo').selectedIndex = 0;
                        document.getElementById('tipoModelo').selectedIndex = 0;
                    } else {
                        alert('Error al guardar: ' + resultado.error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al guardar el modelo');
                }
            });

            // Inicializar con las características existentes
            actualizarCaracteristicasSeleccionadas();

            // Agregar nueva fila de característica
            document.getElementById('btn-agregar-caracteristica')?.addEventListener('click', function () {
                const container = document.getElementById('caracteristicas-container');
                const template = document.getElementById('caracteristica-template');
                const clone = template.content.cloneNode(true);
                const newIndex = container.children.length;

                // Actualizar nombres y atributos
                clone.querySelectorAll('[name]').forEach(elem => {
                    elem.name = elem.name.replace('[0]', `[${newIndex}]`);
                });

                // Asignar índice
                const select = clone.querySelector('.caracteristica-select');
                select.dataset.index = newIndex;

                // Agregar evento de cambio
                select.addEventListener('change', function () {
                    actualizarCaracteristicasSeleccionadas();
                });

                // Agregar evento de eliminación
                clone.querySelector('.btn-eliminar-caracteristica').addEventListener('click', function () {
                    this.closest('.caracteristica-item').remove();
                    actualizarCaracteristicasSeleccionadas();
                    reindexarCaracteristicas();
                });

                container.appendChild(clone);
                actualizarCaracteristicasSeleccionadas();
            });

            // Función para reindexar características después de eliminar
            function reindexarCaracteristicas() {
                const container = document.getElementById('caracteristicas-container');
                const items = container.querySelectorAll('.caracteristica-item');

                items.forEach((item, index) => {
                    item.querySelectorAll('[name]').forEach(input => {
                        const name = input.name.replace(/CaracteristicasSeleccionadas\[\d+\]/,
                            `CaracteristicasSeleccionadas[${index}]`);
                        input.setAttribute('name', name);
                    });

                    const select = item.querySelector('.caracteristica-select');
                    if (select) select.dataset.index = index;
                });
            }

            // Eliminar característica
            document.addEventListener('click', function (e) {
                if (e.target.closest('.btn-eliminar-caracteristica')) {
                    const item = e.target.closest('.caracteristica-item');
                    item.remove();
                    actualizarCaracteristicasSeleccionadas();
                    reindexarCaracteristicas();
                }
            });

            // Manejar cambios en características existentes
            document.querySelectorAll('.caracteristica-select').forEach(select => {
                select.addEventListener('change', function () {
                    actualizarCaracteristicasSeleccionadas();
                });
            });

            function actualizarCaracteristicasSeleccionadas() {
                caracteristicasSeleccionadas.clear();

                document.querySelectorAll('.caracteristica-select').forEach(select => {
                    if (select.value) {
                        caracteristicasSeleccionadas.add(parseInt(select.value));
                    }
                });

                // Actualizar opciones disponibles en todos los dropdowns
                document.querySelectorAll('.caracteristica-select').forEach(select => {
                    const currentValue = select.value;
                    const currentIndex = select.dataset.index;

                    Array.from(select.options).forEach(option => {
                        if (option.value === "") return;

                        const carId = parseInt(option.value);
                        const estaSeleccionada = caracteristicasSeleccionadas.has(carId);

                        // Ocultar opciones ya seleccionadas en otros dropdowns
                        option.hidden = estaSeleccionada && option.value !== currentValue;
                    });
                });
            }
        });
    </script>
}