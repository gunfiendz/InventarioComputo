@page "{handler?}/{id:int?}"
@model FormularioModel
@{
    ViewData["Title"] = Model.Modo == "Crear" ? "Nuevo Equipo" : Model.Modo == "Editar" ? "Editar Equipo" : "Ver Equipo";
    Layout = "_LayoutGeneral";
    bool esModoLectura = Model.Modo == "Ver";
}

<div class="container-form">
    <h1 class="beige-text"><i class="fas fa-laptop"></i> @ViewData["Title"]</h1>

    <form method="post" class="form-beige">
        <input type="hidden" asp-for="Equipo.IdActivoFijo" />
        <div class="row">
            <div class="col-md-7">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group"><label asp-for="Equipo.NumeroSerie" class="form-label"></label><input asp-for="Equipo.NumeroSerie" class="form-control" readonly="@esModoLectura" /><span asp-validation-for="Equipo.NumeroSerie" class="text-danger"></span></div>
                <div class="form-group"><label asp-for="Equipo.EtiquetaInv" class="form-label"></label><input asp-for="Equipo.EtiquetaInv" class="form-control" readonly="@esModoLectura" /><span asp-validation-for="Equipo.EtiquetaInv" class="text-danger"></span></div>
                <div class="form-group"><label asp-for="Equipo.IdTipoEquipo" class="form-label"></label><select asp-for="Equipo.IdTipoEquipo" class="form-control input-beige" id="tipoEquipo" disabled="@esModoLectura"><option value="">-- Seleccione un tipo --</option>@foreach (var tipo in Model.TiposEquipos)
                        {
                            <option value="@tipo.Id" selected="@(tipo.Id == Model.Equipo?.IdTipoEquipo)">@tipo.Nombre</option>
                        }</select></div>
                <div class="form-group"><label asp-for="Equipo.IdMarca" class="form-label"></label><select asp-for="Equipo.IdMarca" class="form-control input-beige" id="marca" disabled="@esModoLectura"><option value="">-- Seleccione un tipo primero --</option></select></div>
                <div class="form-group"><label asp-for="Equipo.IdModelo" class="form-label"></label><select asp-for="Equipo.IdModelo" class="form-control input-beige" id="modelo" disabled="@esModoLectura"><option value="">-- Seleccione una marca primero --</option></select></div>
                <div class="form-group"><label asp-for="Equipo.IdPerfil" class="form-label"></label><select asp-for="Equipo.IdPerfil" class="form-control input-beige" id="perfil" disabled="@esModoLectura"><option value="">-- Seleccione un modelo primero --</option></select></div>
                <div class="row">
                    <div class="col-md-6"><div class="form-group"><label asp-for="Equipo.FechaCompra" class="form-label"></label><input asp-for="Equipo.FechaCompra" type="date" class="form-control" readonly="@esModoLectura"></div></div>
                    <div class="col-md-6"><div class="form-group"><label asp-for="Equipo.Garantia" class="form-label"></label><input asp-for="Equipo.Garantia" class="form-control" readonly="@esModoLectura" /></div></div>
                </div>
                <input type="hidden" asp-for="Equipo.IdEstado" />
            </div>

            <div class="col-md-5">
                <div class="card caracteristicas-card mb-3">
                    <div class="card-header"><h6><i class="fas fa-cogs"></i> Características del Perfil</h6></div>
                    <div class="card-body" id="caracteristicas-container"><p class="text-muted">Seleccione un perfil para ver sus características.</p></div>
                </div>
                <div class="card caracteristicas-card">
                    <div class="card-header"><h6><i class="fas fa-compact-disc"></i> Software Preinstalado</h6></div>
                    <div class="card-body software-list">
                        @if (Model.SoftwareDisponible.Any())
                        {
                            @for (int i = 0; i < Model.SoftwareDisponible.Count; i++)
                            {
                                <div class="form-check software-item">
                                    <input type="hidden" asp-for="SoftwareDisponible[i].Id" />
                                    <input type="hidden" asp-for="SoftwareDisponible[i].Nombre" />
                                    <input class="form-check-input software-checkbox" type="checkbox" asp-for="SoftwareDisponible[i].IsSelected" disabled="@esModoLectura" />
                                    <label class="form-check-label" asp-for="SoftwareDisponible[i].IsSelected">@Model.SoftwareDisponible[i].Nombre</label>
                                    <input type="text" asp-for="SoftwareDisponible[i].ClaveLicencia" class="form-control form-control-sm licencia-input" placeholder="Clave de Licencia (opcional)" style="display: @(Model.SoftwareDisponible[i].IsSelected ? "block" : "none");" readonly="@esModoLectura" />
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No hay software disponible para agregar.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="form-actions mt-4">
            @if (!esModoLectura)
            {
                <button type="submit" class="btn btn-beige">Guardar</button>

                <a href="/Inventario" class="btn btn-cancelar">Cancelar</a>
            }
            else
            {
                <a href="/Inventario/Formulario/Editar/@Model.Equipo.IdActivoFijo" class="btn btn-beige">Editar</a>

                <a href="/Inventario" class="btn btn-cancelar">Volver</a>
            }
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const esModoLectura = '@Model.Modo' === 'Ver';
            const tipoSelect = document.getElementById('tipoEquipo');
            const marcaSelect = document.getElementById('marca');
            const modeloSelect = document.getElementById('modelo');
            const perfilSelect = document.getElementById('perfil');

            function setupEventListeners() {
                if (esModoLectura) return;
                tipoSelect.addEventListener('change', cargarMarcas);
                marcaSelect.addEventListener('change', cargarModelos);
                modeloSelect.addEventListener('change', cargarPerfiles);
                perfilSelect.addEventListener('change', () => cargarCaracteristicas(perfilSelect.value));
            }

            async function cargarDatosIniciales() {
                if (tipoSelect.value) {
                    await cargarMarcas();
                    if (marcaSelect.value) {
                        await cargarModelos();
                        if (modeloSelect.value) { await cargarPerfiles(); }
                    }
                }
                if (perfilSelect.value) { cargarCaracteristicas(perfilSelect.value); }
            }

            async function fetchJson(url) {
                const response = await fetch(url);
                if (!response.ok) { throw new Error(`Error HTTP ${response.status}`); }
                return response.json();
            }

            function populateDropdown(select, items, defaultOption, selectedValue = 0) {
                select.innerHTML = `<option value="">${defaultOption}</option>`;
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item.nombre;
                    if (item.id == selectedValue) { option.selected = true; }
                    select.appendChild(option);
                });
                select.disabled = esModoLectura || items.length === 0;
            }

            function resetDropdown(select, message) {
                select.innerHTML = `<option value="">${message}</option>`;
                select.disabled = true;
            }

            async function cargarMarcas() {
                if (!tipoSelect.value) {
                    resetDropdown(marcaSelect, '-- Seleccione tipo --'); resetDropdown(modeloSelect, '-- Seleccione marca --'); resetDropdown(perfilSelect, '-- Seleccione modelo --'); return;
                }
                resetDropdown(marcaSelect, 'Cargando...');
                try {
                    const marcas = await fetchJson(`/Inventario/Formulario?handler=MarcasPorTipo&tipoId=${tipoSelect.value}`);
                    populateDropdown(marcaSelect, marcas, '-- Seleccione marca --', '@Model.Equipo.IdMarca');
                } catch (e) { resetDropdown(marcaSelect, '-- Error --'); }
            }

            async function cargarModelos() {
                if (!marcaSelect.value) {
                    resetDropdown(modeloSelect, '-- Seleccione marca --'); resetDropdown(perfilSelect, '-- Seleccione modelo --'); return;
                }
                resetDropdown(modeloSelect, 'Cargando...');
                try {
                    const modelos = await fetchJson(`/Inventario/Formulario?handler=ModelosPorMarcaYTipo&marcaId=${marcaSelect.value}&tipoId=${tipoSelect.value}`);
                    populateDropdown(modeloSelect, modelos, '-- Seleccione modelo --', '@Model.Equipo.IdModelo');
                } catch (e) { resetDropdown(modeloSelect, '-- Error --'); }
            }

            async function cargarPerfiles() {
                if (!modeloSelect.value) {
                    resetDropdown(perfilSelect, '-- Seleccione modelo --'); return;
                }
                resetDropdown(perfilSelect, 'Cargando...');
                try {
                    const perfiles = await fetchJson(`/Inventario/Formulario?handler=PerfilesPorModelo&modeloId=${modeloSelect.value}`);
                    populateDropdown(perfilSelect, perfiles, '-- Seleccione perfil --', '@Model.Equipo.IdPerfil');
                } catch (e) { resetDropdown(perfilSelect, '-- Error --'); }
            }

            async function cargarCaracteristicas(perfilId) {
                const container = document.getElementById('caracteristicas-container');
                if (!perfilId) { container.innerHTML = '<p class="text-muted">Seleccione un perfil para ver sus características.</p>'; return; }
                container.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Cargando...</div>';
                try {
                    const caracteristicas = await fetchJson(`/Inventario/Formulario?handler=CaracteristicasPorPerfil&perfilId=${perfilId}`);
                    if (caracteristicas.length > 0) {
                        let html = '<ul class="list-group list-group-flush">';
                        caracteristicas.forEach(car => { html += `<li class="list-group-item"><strong>${car.nombre}:</strong> ${car.valor}</li>`; });
                        html += '</ul>';
                        container.innerHTML = html;
                    } else { container.innerHTML = '<p class="text-muted">No hay características para este perfil.</p>'; }
                } catch (e) { container.innerHTML = '<p class="text-danger">Error al cargar características.</p>'; }
            }

            setupEventListeners();
            cargarDatosIniciales();

            document.querySelectorAll('.software-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const licenseInput = this.closest('.software-item').querySelector('.licencia-input');
                    if (this.checked) {
                        licenseInput.style.display = 'block';
                    } else {
                        licenseInput.style.display = 'none';
                        licenseInput.value = '';
                    }
                });
            });
        });
    </script>
}