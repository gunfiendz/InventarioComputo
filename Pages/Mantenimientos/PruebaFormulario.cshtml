@page "{handler?}/{id:int?}"
@model InventarioComputo.Pages.Mantenimientos.PruebaFormularioModel
@{
    ViewData["Title"] = Model.Modo == "Crear" ? "Nuevo Mantenimiento" :
                        Model.Modo == "Editar" ? "Editar Mantenimiento" : "Ver Mantenimiento";
    Layout = "_LayoutGeneral";

    bool esModoLectura = Model.Modo == "Ver";
}
@using InventarioComputo.Security
@inject PermisosService Perms

@{
    var canModMantenimientos = await Perms.TieneAsync(User, PermisosConstantes.ModificarMantenimientos);
    var hasRoot = await Perms.TieneAsync(User, PermisosConstantes.AccesoTotal);
}

<div class="container-form">
    <h1 class="beige-text"><i class="fas fa-tools"></i> @ViewData["Title"]</h1>
    <form method="post" class="form-beige">
        <input type="hidden" asp-for="Mantenimiento.IdMantenimientoEquipo" />

        <div class="form-group position-relative" style="max-width:700px">
            <label class="form-label">Equipo</label>

            <input type="text"
                   id="txtEquipo"
                   class="form-control input-beige"
                   placeholder="Escribe para buscar: Etiqueta, Perfil, Marca/Modelo..."
                   value="@(Model.Equipos.FirstOrDefault(e => e.Id == Model.Mantenimiento?.IdActivoFijo) is var eq && eq != null ? $"{eq.EtiquetaInv} - {eq.Marca} {eq.Modelo}" : "")"
                   readonly="@(esModoLectura)" />

            <input type="hidden" asp-for="Mantenimiento.IdActivoFijo" />

            <div id="ac-menu" class="ac-menu d-none"></div>

            <span asp-validation-for="Mantenimiento.IdActivoFijo" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Mantenimiento.Fecha" class="form-label"></label>
            <input asp-for="Mantenimiento.Fecha" type="datetime-local"
                   class="form-control" readonly="@esModoLectura">
            <span asp-validation-for="Mantenimiento.Fecha" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Mantenimiento.IdTipoMantenimiento" class="form-label">Tipo de Mantenimiento</label>
            <select asp-for="Mantenimiento.IdTipoMantenimiento" class="form-control input-beige" disabled="@esModoLectura">
                <option value="">-- Seleccione un tipo --</option>
                @foreach (var tipo in Model.TiposMantenimiento)
                {
                    <option value="@tipo.Id"
                            selected="@(tipo.Id == Model.Mantenimiento?.IdTipoMantenimiento)">
                        @tipo.Nombre
                    </option>
                }
            </select>
            <span asp-validation-for="Mantenimiento.IdTipoMantenimiento" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Mantenimiento.Descripcion" class="form-label"></label>
            <textarea asp-for="Mantenimiento.Descripcion" class="form-control"
                      rows="3" readonly="@esModoLectura"></textarea>
            <span asp-validation-for="Mantenimiento.Descripcion" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Mantenimiento.IdEmpleado" class="form-label">Responsable</label>
            <select asp-for="Mantenimiento.IdEmpleado" class="form-control input-beige" disabled="@esModoLectura">
                <option value="">-- Seleccione un responsable --</option>
                @foreach (var empleado in Model.Empleados)
                {
                    <option value="@empleado.Id"
                            selected="@(empleado.Id == Model.Mantenimiento?.IdEmpleado)">
                        @empleado.Nombre
                    </option>
                }
            </select>
            <span asp-validation-for="Mantenimiento.IdEmpleado" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Mantenimiento.Costo" class="form-label"></label>
            <input asp-for="Mantenimiento.Costo" data-validate="SoloNumeros" step="0.01"
                   class="form-control" readonly="@esModoLectura">
            <span asp-validation-for="Mantenimiento.Costo" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Mantenimiento.Observaciones" class="form-label"></label>
            <textarea asp-for="Mantenimiento.Observaciones" class="form-control"
                      rows="2" readonly="@esModoLectura"></textarea>
            <span asp-validation-for="Mantenimiento.Observaciones" class="text-danger"></span>
        </div>

        <div class="form-actions">
            @if (!esModoLectura)
            {
                @if (canModMantenimientos)
                {
                    <button type="submit" class="btn btn-beige">Guardar</button>
                }
                <button type="button" class="btn btn-cancelar"
                        onclick="if (window.history.length > 1) { history.back(); } else { location.href='@Url.Page("/Mantenimientos/Index")'; }">
                    Volver
                </button>
            }
            else
            {
                <button type="button" class="btn btn-cancelar"
                        onclick="if (window.history.length > 1) { history.back(); } else { location.href='@Url.Page("/Mantenimientos/Index")'; }">
                    Volver
                </button>
            }
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const txt = document.getElementById('txtEquipo');
            const menu = document.getElementById('ac-menu');
            const hiddenId = document.querySelector('input[name="Mantenimiento.IdActivoFijo"]');
            const esModoLectura = @esModoLectura.ToString().ToLower();

            // ======= ÚNICO CAMBIO: igual que en Asignar.cshtml =======
            const baseUrl = '@Url.Page("PruebaFormulario")';
            // =========================================================

            // Helper para construir URL al handler vía query string.
            const hUrl = (qs) => `${baseUrl}?handler=BuscarEquipos${qs ? '&' + qs : ''}`;

            if (txt && menu && hiddenId && !esModoLectura) {
                let results = [];
                let activeIndex = -1;
                let debounceTimer = null;
                let lastTerm = '';

                // Precarga etiqueta si ya hay Id (>0)
                (async function preload() {
                    const idVal = parseInt(hiddenId.value || '0', 10);
                    if (idVal > 0) {
                        try {
                            const url = hUrl(`id=${encodeURIComponent(idVal)}`);
                            console.log('[AC] preload GET', url);
                            const r = await fetch(url, { credentials: 'same-origin' });
                            console.log('[AC] preload status', r.status);
                            if (r.ok) {
                                const d = await r.json();
                                if (d && d.label) txt.value = d.label;
                            }
                        } catch (e) {
                            console.error('[AC] preload error', e);
                        }
                    }
                })();

                function setActive(i) {
                    const items = menu.querySelectorAll('.ac-item');
                    items.forEach(el => el.classList.remove('active'));
                    if (i >= 0 && i < items.length) {
                        items[i].classList.add('active');
                        activeIndex = i;
                    } else {
                        activeIndex = -1;
                    }
                }

                function escRe(s) { return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); }
                function highlight(text, term) {
                    if (!term) return text;
                    const re = new RegExp(escRe(term), 'ig');
                    return text.replace(re, m => `<span class="ac-highlight">${m}</span>`);
                }

                function render(term) {
                    menu.innerHTML = '';
                    if (!results.length) {
                        menu.classList.add('d-none');
                        return;
                    }
                    for (let i = 0; i < results.length; i++) {
                        const r = results[i];
                        const div = document.createElement('div');
                        div.className = 'ac-item';
                        div.dataset.id = r.id;
                        div.dataset.label = r.label;
                        div.innerHTML = highlight(r.label, term);
                        div.addEventListener('mousedown', (e) => {
                            e.preventDefault();
                            choose(i);
                        });
                        menu.appendChild(div);
                    }
                    setActive(0);
                    menu.classList.remove('d-none');
                }

                async function search(term) {
                    term = term.trim();
                    if (term.length < 2) {
                        results = [];
                        render('');
                        return;
                    }
                    if (term === lastTerm) return;
                    lastTerm = term;

                    try {
                        const url = hUrl(`term=${encodeURIComponent(term)}`);
                        console.log('[AC] search GET', url);
                        const r = await fetch(url, { credentials: 'same-origin' });
                        console.log('[AC] search status', r.status);
                        if (!r.ok) return;
                        const data = await r.json();
                        results = Array.isArray(data) ? data : [];
                        render(term);
                    } catch (e) {
                        console.error('[AC] search error', e);
                    }
                }

                function choose(index) {
                    if (index < 0 || index >= results.length) return;
                    const sel = results[index];
                    txt.value = sel.label;
                    hiddenId.value = sel.id;
                    menu.classList.add('d-none');
                }

                txt.addEventListener('input', () => {
                    hiddenId.value = ''; // limpiar hasta seleccionar
                    menu.classList.add('d-none');
                    const term = txt.value;
                    if (debounceTimer) clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => search(term), 220);
                });

                txt.addEventListener('keydown', (e) => {
                    const visible = !menu.classList.contains('d-none');
                    if (!visible) return;
                    const items = menu.querySelectorAll('.ac-item');
                    if (!items.length) return;

                    switch (e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            setActive(Math.min(activeIndex + 1, items.length - 1));
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            setActive(Math.max(activeIndex - 1, 0));
                            break;
                        case 'Enter':
                            if (activeIndex >= 0) {
                                e.preventDefault();
                                choose(activeIndex);
                            }
                            break;
                        case 'Escape':
                            menu.classList.add('d-none');
                            break;
                    }
                });

                // Resolver exacto al perder foco
                txt.addEventListener('blur', async () => {
                    if (hiddenId.value) return;
                    const label = txt.value.trim();
                    if (!label) return;

                    try {
                        const url = hUrl(`exact=${encodeURIComponent(label)}`);
                        console.log('[AC] exact GET', url);
                        const r = await fetch(url, { credentials: 'same-origin' });
                        console.log('[AC] exact status', r.status);
                        if (r.ok) {
                            const d = await r.json();
                            if (d && d.id) {
                                hiddenId.value = d.id;
                                txt.value = d.label;
                                return;
                            }
                        }
                        hiddenId.value = '';
                    } catch (e) {
                        console.error('[AC] exact error', e);
                    }
                });

                // Cerrar menú si clic fuera
                document.addEventListener('click', (e) => {
                    if (!menu.contains(e.target) && e.target !== txt) {
                        menu.classList.add('d-none');
                    }
                });

                // Validación al enviar
                const form = txt.closest('form');
                form.addEventListener('submit', (e) => {
                    if (!hiddenId.value) {
                        e.preventDefault();
                        alert('Debes seleccionar un equipo válido de las sugerencias.');
                        txt.focus();
                    }
                });
            }
        });
    </script>
}
