@page "{handler?}/{id:int?}"
@model InventarioComputo.Pages.AsignarModel
@{
    ViewData["Title"] = Model.Modo == "Crear" ? "Nueva Asignación" : Model.Modo == "Editar" ? "Editar Asignación" : "Ver Asignación";
    Layout = "_LayoutGeneral";
    bool esModoLectura = Model.Modo == "Ver";
}

<div class="container-form">
    <h1 class="beige-text"><i class="fas fa-user-check"></i> @ViewData["Title"]</h1>

    <form method="post" class="form-beige mt-4">
        <input type="hidden" asp-for="Asignacion.IdEmpleadoEquipo" />
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        <h5>1. Equipo a Asignar</h5>
        <hr />
        @if (Model.EsActivoPreseleccionado)
        {
            <div class="form-group">
                <label>Equipo</label>
                <input type="text" class="form-control" value="@Model.ActivoPreseleccionado?.Identificador" readonly />
                <input type="hidden" asp-for="Asignacion.IdActivoFijo" />
            </div>
        }
        else
        {
            <div class="form-group position-relative" style="max-width:700px">
                <label for="txtEquipo">Equipo (buscar por Etiqueta, Serie, Marca/Modelo, Perfil):</label>

                <input id="txtEquipo"
                       type="text"
                       class="form-control input-beige"
                       placeholder="Escribe al menos 2 caracteres…"
                       autocomplete="off"
                @(esModoLectura ? "readonly" : "") />

                <div id="ac-menu" class="ac-menu d-none"></div>

                <input type="hidden" asp-for="Asignacion.IdActivoFijo" />
                <span asp-validation-for="Asignacion.IdActivoFijo" class="text-danger"></span>

                <small class="text-muted">Usa ↑/↓ para navegar sugerencias y Enter para seleccionar.</small>
            </div>
        }

        <h5 class="mt-4">2. Datos de la Asignación</h5>
        <hr />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Asignacion.IdEmpleado"></label>
                    <select asp-for="Asignacion.IdEmpleado" class="form-control input-beige" id="selectEmpleado" asp-items="@(new SelectList(Model.Empleados, "Id", "Nombre"))" disabled="@esModoLectura">
                        <option value="">-- Seleccione un empleado --</option>
                    </select>
                    <span asp-validation-for="Asignacion.IdEmpleado" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Asignacion.IdDepartamento"></label>
                    <select asp-for="Asignacion.IdDepartamento" class="form-control input-beige" id="selectDepartamento" asp-items="@(new SelectList(Model.Departamentos, "Id", "Nombre"))" disabled="@esModoLectura">
                        <option value="">-- Seleccione un departamento --</option>
                    </select>
                    <span asp-validation-for="Asignacion.IdDepartamento" class="text-danger"></span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Asignacion.TipoAsignacion"></label>
                    <select asp-for="Asignacion.TipoAsignacion" class="form-select input-beige" disabled="@esModoLectura">
                        <option value="">-- Seleccione tipo --</option>
                        <option value="Nueva">Nueva</option>
                        <option value="Reasignación">Reasignación</option>
                        <option value="Préstamo Temporal">Préstamo Temporal</option>
                        <option value="Reemplazo">Reemplazo</option>
                    </select>
                    <span asp-validation-for="Asignacion.TipoAsignacion" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Asignacion.FechaAsignacion"></label>
                    <input asp-for="Asignacion.FechaAsignacion" type="datetime-local" class="form-control" asp-format="{0:yyyy-MM-ddTHH:mm}" readonly="@esModoLectura" />
                    <span asp-validation-for="Asignacion.FechaAsignacion" class="text-danger"></span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Asignacion.DetallesAsignacion"></label>
            <textarea asp-for="Asignacion.DetallesAsignacion" class="form-control" rows="2" placeholder="Ej: Equipo nuevo para proyecto X..." readonly="@esModoLectura"></textarea>
        </div>
        <div class="form-group">
            <label asp-for="Asignacion.DetallesRetiro"></label>
            <textarea asp-for="Asignacion.DetallesRetiro" class="form-control" rows="2" placeholder="Si esta asignación reemplaza una anterior..." readonly="@esModoLectura"></textarea>
        </div>

        <div class="form-actions mt-4">
            @if (Model.Modo == "Crear" || Model.Modo == "Editar")
            {
                <button type="submit" class="btn btn-beige">Guardar</button>
                <a href="/Asignaciones/Index" class="btn btn-cancelar">Cancelar</a>
            }
            else
            {
                <a href="/Asignaciones/Index" class="btn btn-cancelar">Volver</a>
            }
            
        </div>
    </form>
</div>

@section Scripts {
    <!-- jQuery debe ir ANTES del _ValidationScriptsPartial -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const txt = document.getElementById('txtEquipo');               
            const menu = document.getElementById('ac-menu');                
            const hiddenId = document.querySelector('input[name="Asignacion.IdActivoFijo"]'); 
            const esModoLectura = @esModoLectura.ToString().ToLower();

            // Base URL correcta
            const baseUrl = '@Url.Page("Asignar")';

            // --------- AUTOCOMPLETE ----------
            if (txt && menu && hiddenId && !esModoLectura) {
                let results = [];
                let activeIndex = -1;
                let debounceTimer = null;
                let lastTerm = '';

                // Precarga etiqueta si ya tenemos un Id (>0) por re-post/validación
                (async function preload() {
                    if (hiddenId.value && hiddenId.value !== '0') {
                        try {
                            const r = await fetch(`${baseUrl}?handler=BuscarEquipos&id=${encodeURIComponent(hiddenId.value)}`);
                            if (r.ok) {
                                const d = await r.json();
                                if (d && d.label) txt.value = d.label;
                            }
                        } catch { }
                    }
                })();

                function setActive(i) {
                    const items = menu.querySelectorAll('.ac-item');
                    items.forEach(el => el.classList.remove('active'));
                    if (i >= 0 && i < items.length) {
                        items[i].classList.add('active');
                        activeIndex = i;
                    } else {
                        activeIndex = -1;
                    }
                }

                function highlight(text, term) {
                    if (!term) return text;
                    const esc = s => s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                    const re = new RegExp(esc(term), 'ig');
                    return text.replace(re, m => `<span class="ac-highlight">${m}</span>`);
                }

                function render(term) {
                    menu.innerHTML = '';
                    if (!results.length) {
                        menu.classList.add('d-none');
                        return;
                    }
                    for (let i = 0; i < results.length; i++) {
                        const r = results[i];
                        const div = document.createElement('div');
                        div.className = 'ac-item';
                        div.dataset.id = r.id;
                        div.dataset.label = r.label;
                        div.innerHTML = highlight(r.label, term);
                        div.addEventListener('mousedown', (e) => {
                            e.preventDefault();
                            choose(i);
                        });
                        menu.appendChild(div);
                    }
                    setActive(0);
                    menu.classList.remove('d-none');
                }

                async function search(term) {
                    term = term.trim();
                    if (term.length < 2) {
                        results = [];
                        render('');
                        return;
                    }
                    if (term === lastTerm) return;
                    lastTerm = term;

                    try {
                        const r = await fetch(`${baseUrl}?handler=BuscarEquipos&term=${encodeURIComponent(term)}`);
                        if (!r.ok) return;
                        const data = await r.json();
                        results = Array.isArray(data) ? data : [];
                        render(term);
                    } catch (e) {
                        console.error(e);
                    }
                }

                function choose(index) {
                    if (index < 0 || index >= results.length) return;
                    const sel = results[index];
                    txt.value = sel.label;
                    hiddenId.value = sel.id;
                    menu.classList.add('d-none');
                }

                txt.addEventListener('input', () => {
                    hiddenId.value = ''; // limpiar hasta seleccionar
                    menu.classList.add('d-none');
                    const term = txt.value;
                    if (debounceTimer) clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => search(term), 220);
                });

                txt.addEventListener('keydown', (e) => {
                    const visible = !menu.classList.contains('d-none');
                    if (!visible) return;
                    const items = menu.querySelectorAll('.ac-item');
                    if (!items.length) return;

                    switch (e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            setActive(Math.min(activeIndex + 1, items.length - 1));
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            setActive(Math.max(activeIndex - 1, 0));
                            break;
                        case 'Enter':
                            if (activeIndex >= 0) {
                                e.preventDefault();
                                choose(activeIndex);
                            }
                            break;
                        case 'Escape':
                            menu.classList.add('d-none');
                            break;
                    }
                });

                // Resolver exacto al perder foco (si tecleó la etiqueta completa)
                txt.addEventListener('blur', async () => {
                    if (hiddenId.value) return;
                    const label = txt.value.trim();
                    if (!label) return;

                    try {
                        const r = await fetch(`${baseUrl}?handler=BuscarEquipos&exact=${encodeURIComponent(label)}`);
                        if (r.ok) {
                            const d = await r.json();
                            if (d && d.id) {
                                hiddenId.value = d.id;
                                txt.value = d.label;
                                return;
                            }
                        }
                        hiddenId.value = '';
                    } catch { /* noop */ }
                });

                // Cerrar menú si clic fuera
                document.addEventListener('click', (e) => {
                    if (!menu.contains(e.target) && e.target !== txt) {
                        menu.classList.add('d-none');
                    }
                });

                // Validación al enviar
                const form = txt.closest('form');
                form.addEventListener('submit', (e) => {
                    if (!hiddenId.value) {
                        e.preventDefault();
                        alert('Debes seleccionar un equipo válido de las sugerencias.');
                        txt.focus();
                    }
                });
            }

            const empleadoSelect = document.getElementById('selectEmpleado');
            const departamentoSelect = document.getElementById('selectDepartamento');

            if (empleadoSelect && departamentoSelect) {
                empleadoSelect.addEventListener('change', async function () {
                    const empleadoId = this.value;
                    if (!empleadoId) {
                        departamentoSelect.value = "";
                        return;
                    }
                    try {
                        const response = await fetch(`${baseUrl}?handler=EmpleadoInfo&idEmpleado=${empleadoId}`);
                        if (!response.ok) return;
                        const data = await response.json();
                        if (data.idDepartamento) {
                            departamentoSelect.value = data.idDepartamento;
                        }
                    } catch (error) {
                        console.error("Error al obtener info del empleado:", error);
                    }
                });
            }
        });
    </script>
}

